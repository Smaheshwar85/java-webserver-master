pipeline {
    agent any
 environment {
        GCR_REGISTRY = "gcr.io" // Change to your GCR registry URL
        DEST_PROJECT_ID = "terraform" // Change to your GCP Project ID
        IMAGE_NAME = "java-webserver" // Change to your desired image name
        IMAGE_TAG = "latest" // Change to your desired image tag
    }
     parameters {
        string(name: 'PROJECT_ID', defaultValue: 'devopsjunction23', description: 'Google Cloud Project ID')
        string(name: 'REGION', defaultValue: 'us-central1', description: 'Google Cloud Region')
		string(name: 'DEST_PROJECT_ID', defaultValue: 'terraform-gcp-395808', description: 'Google Cloud destinationProject ID')
		string(name: 'REPO_NAME', defaultValue: 'src', description: 'Google Cloud destinationProject ID')
		string(name: 'DEST_REPO_NAME', defaultValue: 'dest', description: 'Google Cloud destinationProject ID')
		string(name: 'LOCATION', defaultValue: 'US-central1', description: 'Google Cloud destinationProject ID')

    }
        stages {
            stage('Parameters'){
                steps {
                    script {
                    properties([
                            parameters([
                                [$class: 'ChoiceParameter', 
                                    choiceType: 'PT_SINGLE_SELECT', 
                                    description: 'Select the Environemnt from the Dropdown List', 
                                    filterLength: 1, 
                                    filterable: false, 
                                    name: 'ENV', 
                                    script: [
                                        $class: 'GroovyScript', 
                                        fallbackScript: [
                                            classpath: [], 
                                            sandbox: false, 
                                            script: 
                                                "return['Could not get The environemnts']"
                                        ], 
                                        script: [
                                            classpath: [], 
                                            sandbox: false, 
                                            script: 
                                                "return['test','prod']"
                                        ]
                                    ]
                                ],
                                
                            ])
                        ])
                    }
                }
            }
            stage('Deploy:Prep'){
                steps{
                     script{
                        echo "selected enviornment :" +ENV
                     }
                }
            }
            stage('Deploy to Artifact registery and run'){
                steps{
                    script{
                        echo 'Deploy jars'
                         if (ENV.equals("test")){
                                             def repositoryname = "${DEST_PROJECT_ID}-${env.BUILD_NUMBER}"
                                               withCredentials([file(credentialsId: 'cred', variable: 'CRED')]){
def command = """
    gcloud auth activate-service-account --key-file="$CRED"
    gcloud config set project terraform-gcp-395808
   printf 'yes' | gcloud artifacts repositories create $repositoryname --repository-format=docker --location=us-central1 --description="created repo"
   gcloud auth configure-docker  us-central1-docker.pkg.dev
   
"""
sh(script: command, returnStatus: true)
sh "docker pull us-central1-docker.pkg.dev/xyz-java2/gcr.io/devopsjunction23/java-webserver"
sh "docker tag us-docker.pkg.dev/xyz-java2/gcr.io/devopsjunction23/java-webserver us-central1-docker.pkg.dev/terraform-gcp-395808/$repositoryname/gcr.io/devopsjunction23/java-webserver:34"
sh "docker push us-central1-docker.pkg.dev/terraform-gcp-395808/$repositoryname/gcr.io/devopsjunction23/java-webserver:34"
sh "echo "https://us-central1-docker.pkg.dev" | docker-credential-gcr get"
 
                                                       }
                                              }
                                                   
                                                    else (ENV.equals("prod")){
                                                        return["ami-sdf34sdf:  AMI with Java", "ami-sdf34ds: AMI with Python", "ami-sdf3sf3: AMI with Groovy"]
                                                    }
                    }
                    }
                                                   
                                             
                                                    
                    
        }
                }
            }
        
    
